name: Compile gcc

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.TARGET.OS }}
    strategy:
      fail-fast: false
      matrix:
        TARGET:
          - {
              OS: 'ubuntu-latest',
              CFLAGS: '-std=gnu89 -m32',
              HOST: 'i386-pc-linux',
              ARCHIVE_NAME: 'linux.tar.gz'
            }
          # OSX doesn't work yet
          # - {
          #     OS: 'macos-latest',
          #     CFLAGS: '-std=gnu89 -Wno-return-type -Wno-error -Wno-implicit-function-declaration',
          #     HOST: 'i386-apple-darwin',
          #     ARCHIVE_NAME: 'mac.tar.gz'
          #   }

    name: Building gcc for ${{ matrix.TARGET.OS }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        shell: bash
        if: matrix.TARGET.OS == 'ubuntu-latest'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential bison file gperf gcc gcc-multilib lib32ncurses5-dev zlib1g-dev:i386
          # echo "deb http://old-releases.ubuntu.com/ubuntu zesty main" | sudo tee /etc/apt/sources.list.d/zesty.list
          # sudo apt-add-repository -r universe
          # sudo apt update
          # sudo apt install -y gcc-6 gcc-6-multilib
          # sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 1
      - run: mkdir build
      - name: Configure
        shell: bash
        working-directory: build
        run: |
          ../configure --target=ee --enable-c-cpplib --without-sim --disable-sim --enable-c-mbchar --host=${{ matrix.TARGET.HOST }}
      - name: Make everything
        continue-on-error: true
        shell: bash
        working-directory: build
        run: |
          make all-gcc CFLAGS="${{ matrix.TARGET.CFLAGS }}"
      - name: Test for cc1
        shell: bash
        working-directory: build/gcc
        run: |
          test -f cc1
          file cc1
      - name: Create release archive
        shell: bash
        working-directory: build/gcc
        run: |
          cp xgcc gcc
          tar -czf ../../${{ matrix.TARGET.ARCHIVE_NAME }} --dereference as cpp cc1 gcc
      - name: Upload archive
        uses: actions/upload-artifact@v2
        with:
          name: gcc-kh1-${{ matrix.TARGET.OS }}
          path: |
            ${{ matrix.TARGET.ARCHIVE_NAME }}
      - name: Update release
        uses: johnwbyrd/update-release@v1.0.0
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ matrix.TARGET.ARCHIVE_NAME }}